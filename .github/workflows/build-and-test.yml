# Copyright (c) 2022 Guilherme Janczak <guilherme.janczak@yandex.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

name: Build and test
on: [push, pull_request]

# GitHub Actions doesn't support YAML anchors, so the bit of code below is
# copypasted between jobs:
#
#      - uses: actions/checkout@v2.4.0
#      - name: build
#        run: |
#          meson setup build
#          meson compile -C build
#      - name: test
#        run: meson test -C build
#      - uses: actions/upload-artifact@v2.3.1
#        if: failure()
#        with:
#          name: meson-logs
#          path: build/meson-logs

jobs:
  glibc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - run: |
          pip install meson ninja
          sudo apt update
          sudo apt install -y libbsd-dev
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          meson setup build
          meson compile -C build
      - name: test
        run: meson test -C build
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: meson-logs-glibc
          path: build/meson-logs
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - run: pip install meson ninja
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          meson setup build
          meson compile -C build
      - name: test
        run: meson test -C build
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: meson-logs-macos
          path: build/meson-logs
  msys2:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        sys: [msys, clang64, mingw64, mingw32, ucrt64]
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          install: git groff pactoys dos2unix
      - uses: actions/checkout@v2.4.0
      - name: setup-msys
        if: ${{matrix.sys == 'msys'}}
        run: pacman -S --noconfirm --needed mingw-w64-x86_64-nsis meson gcc
      - name: setup-no-nsis
        if: ${{matrix.sys == 'clang64'}}
        run: |
          pacboy -S --noconfirm --needed mingw-w64-x86_64-nsis meson:p clang:p
      - name: setup-nsis
        if: ${{matrix.sys != 'msys' && matrix.sys != 'clang64'}}
        run: pacboy -S --noconfirm --needed -- nsis:p meson:p gcc:p
      - name: build
        run: |
          meson setup build
          meson compile -C build
      - name: test
        run: meson test -C build
      - name: installer
        run: ./dictpw_installer.sh -o 'build\setup-dictpw-${{matrix.sys}}.exe'
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: meson-logs-${{matrix.sys}}
          path: build/meson-logs
      - uses: actions/upload-artifact@v2.3.1
        if: success()
        with:
          name: setup-${{matrix.sys}}
          path: build/setup-*.exe
  cygwin:
    runs-on: windows-latest
    env:
      CYGWIN_NOWINPATH: 1 # Removes non-Cygwin dirs from PATH.
      CHERE_INVOKING: '' # Makes Cygwin's `bash.exe --login` not cd.
    defaults:
      run:
        shell: C:\cygwin\bin\bash.exe --login -o igncr {0}
    steps:
      - run: git config --global core.autocrlf input
        # This is NOT the Cygwin bash, it's the Git for Windows bash from the
        # default Github Actions Windows VM. This step tells git to translate
        # Unix newlines to DOS newlines.
        shell: bash
      - uses: actions/checkout@v2.4.0
      - uses: cygwin/cygwin-install-action@master
        with:
          # git might be needed while working with git versions of libobsd
          packages: gcc-core meson groff-perl git dos2unix
      - name: build
        run: |
          cd ${GITHUB_WORKSPACE}
          meson setup build
          meson compile -C build
      - name: test
        run: |
          cd ${GITHUB_WORKSPACE}
          meson test -C build
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: meson-logs-cygwin
          path: build/meson-logs
  haiku:
    runs-on: ubuntu-22.04
    container: 'docker.io/hectorm/qemu-haiku:latest'
    steps:
      # Copied from: https://github.com/hectorm/docker-qemu-haiku#github-actions
      # Notice I changed make to meson in the 'Install packages' step.
      - name: 'Wait until the VM is ready'
        run: 'container-init & timeout 600 vmshell exit 0'
      - name: 'Install packages'
        run: 'vmshell pkgman install -y meson gcc haiku_devel'
      - name: 'Checkout project'
        uses: 'actions/checkout@main'
      - name: 'Copy project to VM'
        run: 'vmshell mkdir ./src/; tar -cf - ./ | vmshell tar -xf - -C ./src/'
      # Now the rest is much of the same old.
      - name: build
        run: |
          vmshell meson setup build src
          vmshell meson compile -C build
      - name: test
        run: vmshell meson test -C build
      - name: copy failure logs
        if: failure()
        run: |
          vmshell tar -cf - build/meson-logs | tar -xf -
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: meson-logs-haiku
          path: build/meson-logs
  vs:
    runs-on: windows-latest
    strategy:
      matrix:
        cc: [clang, msvc]
        arch: [aarch64, amd64]
    steps:
      - uses: actions/setup-python@v2.3.1
      - run: |
          pip install meson
          choco install groff dos2unix
      - uses: actions/checkout@v2.4.0
      - name: build
        run: |
          if ("${{matrix.arch}}" -eq "aarch64") {
            $cross = "--cross-file=.github/workflows/meson-vs-aarch64.txt"
          }
          if ("${{matrix.cc}}" -eq "msvc") {
            # buildtype=plain because b_sanitize doesn't work with debug libs on
            # VS.
            # Also, asan doesn't seem to be working with clang.
            $build = "-Dbuildtype=debug"
            $asan = "-Db_sanitize=address"
          }
          meson setup -Db_vscrt=static_from_buildtype $cross $build $asan `
              --backend=vs `
              --cross-file=.github/workflows/meson-vs-${{matrix.cc}}.txt build
          meson compile -C build
      - name: test
        run: meson test -C build
      - name: get 64-bit NSIS
        run: |
          # Reference: https://www.msys2.org/docs/ci/
          # Run for the first time
          C:\msys64\usr\bin\bash -lc ' '
          # Update MSYS2
          C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Core update
          C:\msys64\usr\bin\bash -lc `
              'pacman --noconfirm -Syuu mingw-w64-x86_64-nsis'  # Normal update
      - name: installer
        run: |
          $out = "build\setup-dictpw-vs-${{matrix.cc}}-${{matrix.arch}}.exe"
          $cmd = "makensis -DOUTFILE='" + "$out"  + "' dictpw.nsi"
          $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
          $env:MSYSTEM = 'MINGW64'  # Start a 64 bit Mingw environment
          C:\msys64\usr\bin\bash -lc "$cmd"
      - uses: actions/upload-artifact@v2.3.1
        if: failure()
        with:
          name: meson-logs-vs-${{matrix.cc}}-${{matrix.arch}}
          path: build/meson-logs
      - uses: actions/upload-artifact@v2.3.1
        if: success()
        with:
          name: setup-vs-${{matrix.cc}}-${{matrix.arch}}
          path: build/setup-*.exe
