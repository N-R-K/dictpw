# Copyright (c) 2022 Guilherme Janczak <guilherme.janczak@yandex.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

name: Release
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  # keep in sync with msys2 from build-and-test.yml
  mingw-build:
    runs-on: windows-latest
    outputs:
      version: ${{steps.installer.outputs.version}}
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      matrix:
        sys: [mingw64, mingw32]
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          path-type: strict
          install: git groff dos2unix
          pacboy: gcc:p meson:p nsis:p ninja:p jq:p
      - uses: actions/checkout@v2.4.0
      - name: prepare
        run: |
          meson setup -Dbuildtype=release build
          meson compile -C build
          strip build/dictpw.exe
      - name: installer
        id: installer
        run: |
          ver="$(meson introspect --projectinfo build | jq -r '.version')"
          printf '::set-output name=version::%s\n' "$ver"

          if ("${{matrix.sys}}" -eq "mingw64") {
            $arch = "x64"
          } else {
            $arch = "x86"
          }
          inst="setup-dictpw-${ver}-${arch}.exe"
          ./dictpw_installer.sh -o "build/$inst"
      - uses: actions/upload-artifact@v2.3.1
        if: success()
        with:
          name: dist
          path: build/setup*dictpw*
  vs-build:
    needs: mingw-build
    runs-on: windows-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - name: setup
        run: |
          pip install meson
          choco install groff dos2unix
      - uses: actions/checkout@v2.4.0
      - name: prepare
        run: |
          $cross = "--cross-file=.github/workflows/meson-vs-aarch64.txt"
          meson setup -Dbuildtype=release $cross --backend=vs `
              --cross-file=.github/workflows/meson-vs-clang.txt  build
          meson compile -C build
      - name: test
        run: meson test -C build
      - name: get 64-bit NSIS
        run: |
          # Reference: https://www.msys2.org/docs/ci/
          # Run for the first time
          C:\msys64\usr\bin\bash -lc ' '
          # Update MSYS2
          C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Core update
          C:\msys64\usr\bin\bash -lc `
              'pacman --noconfirm -Syuu mingw-w64-x86_64-nsis'  # Normal update
      - name: installer
        run: |
          $ver = "${{needs.mingw-build.outputs.version}}"
          $out = "build\setup-dictpw-" + "$ver" + "-Arm64.exe"
          $cmd = "makensis -DOUTFILE='" + "$out"  + "' dictpw.nsi"
          $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
          $env:MSYSTEM = 'MINGW64'  # Start a 64 bit Mingw environment
          C:\msys64\usr\bin\bash -lc "$cmd"
      - uses: actions/upload-artifact@v2.3.1
        if: success()
        with:
          name: dist
          path: build/setup*dictpw*
  publish:
    needs: [mingw-build, vs-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2.3.1
      - name: setup
        run: pip install meson ninja && sudo apt install libbsd-dev
      - uses: actions/checkout@v2.4.0
      - uses: actions/download-artifact@v2.1.0
      - name: dist
        run: |
          meson setup build
          meson dist -C build
      - name: publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (cd dist && for file in *.exe; do sha256sum "$file" > \
              "${file}.sha256sum"; done)
          ver="${{needs.mingw-build.outputs.version}}"
          gh release create "v$ver" --title "dictpw $ver" \
            --notes-file "docs/CHANGELOG-${ver}.md" \
            --target $GITHUB_SHA dist/* build/meson-dist/*
